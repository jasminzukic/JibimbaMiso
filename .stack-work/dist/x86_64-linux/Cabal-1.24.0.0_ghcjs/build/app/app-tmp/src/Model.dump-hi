
==================== FINAL INTERFACE ====================
2018-06-06 08:42:47.960432 UTC

interface main@main:Model 7103
  interface hash: d6485229903edd853cc2c0c316f70988
  ABI hash: 6c4013d179ec3a7770ca14b3e26af3b8
  export-list hash: b0844451e857cf9604724bf6e6e7d53e
  orphan hash: 815178c2e5f9afc461d1fe8c5918c0bb
  flag hash: 8c2b7e70e6c4f30ecf05b3f3a01022df
  sig of: Nothing
  used TH splices: False
  where
exports:
  Model.initialModel
  Model.Action{Model.AddSyn Model.AddTeam Model.BackToMainMenu Model.GenerateSyntagmas Model.NextWord Model.NoOp Model.ShuffleSyns Model.ShuffleTeams Model.SkipWord Model.StartCounter Model.Tick Model.ToAliasRules Model.ToBasicRules Model.ToCharadesRules Model.ToGameOver Model.ToGameplay Model.ToMainMenu Model.ToOneWordRules Model.ToRoundPrep Model.ToRules Model.ToSettings Model.ToSynInput Model.ToTeamInput Model.UpdateNumberField Model.UpdateSynField Model.UpdateTeamField}
  Model.Model{Model.Model Model.buttonEnabled Model.currentTeam Model.guessed Model.inputField Model.invalidSyntagma Model.invalidTeamName Model.numberField Model.runda Model.state Model.syntagmas Model.teams Model.time}
  Model.States{Model.AliasRules Model.BasicRules Model.CharadesRules Model.GameOver Model.Gameplay Model.MainMenu Model.OneWordRules Model.RoundPrep Model.Settings Model.SynInput Model.TeamInput Model.TimeOut}
module dependencies:
package dependencies: miso-0.18.0.0@HRRS7cQi8bU4jYuh6NkL5Z
                      aeson-0.11.3.0@aeson_JYLYzg269i8LI7KZ5LWbtd
                      array-0.5.1.0@array_30xqJMcqwbkI6LBfgLltdH
                      attoparsec-0.13.1.0@attop_8CGTtPbG09CKTKQ3vR56BU base-4.8.2.0
                      binary-0.7.5.0@binar_03WQkzzYAE08cZoz1r0IhX
                      bytestring-0.10.6.0@bytes_96M8oqQTVIe6bIZr9qhhuC
                      containers-0.5.6.2@conta_3UVKjic2MoqF92jHhg7Ur8
                      deepseq-1.4.1.1@deeps_6zNFUGyDFQ59UU8BCTkqk0
                      dlist-0.7.1.2@dlist_H1vOXFk9eUBGkwT4KVRG25
                      fail-4.9.0.0@fail_9oXv4m1cFET3xpGVsHCxUq ghc-prim-0.4.0.0
                      ghcjs-base-0.2.0.0@ghcjs_210XEgjDa5q074bipEhzRA
                      ghcjs-prim-0.1.0.0@ghcjs_9jpamHTyFf8CL10DbS4jxv
                      hashable-1.2.4.0@hasha_Bj7NmECL61JJPMp5YcPO6u integer-gmp-0.5.1.0
                      primitive-0.6.1.0@primi_CRhbMv8kA5dFpZOCD0QPrI
                      scientific-0.3.4.9@scien_7RWav52ZEb8LpSeINhjuJE
                      semigroups-0.18.2@semig_F6zNE9TVLzf9ErbxvxghEu
                      tagged-0.8.4@tagge_EpMmiBjiJPdFiokZ6hOmMm template-haskell-2.10.0.0
                      text-1.2.2.1@text_AoFu0I23s11C5sDmOoIAPZ
                      time-1.5.0.1@time_1GoZbNl2fDzKHJr3QPGAAf
                      transformers-0.4.2.0@trans_EziP6JoSSK398q9vuXpnAA
                      unordered-containers-0.2.7.2@unord_H1f6VqdfPrVIuMiYe9bmpP
                      vector-0.11.0.0@vecto_DeaUpJs6ZtbBhz15yBYLWJ
orphans: miso-0.18.0.0@HRRS7cQi8bU4jYuh6NkL5Z:Miso.String
         aeson-0.11.3.0@aeson_JYLYzg269i8LI7KZ5LWbtd:Data.Aeson.Types.Generic
         aeson-0.11.3.0@aeson_JYLYzg269i8LI7KZ5LWbtd:Data.Aeson.Types.Instances
         attoparsec-0.13.1.0@attop_8CGTtPbG09CKTKQ3vR56BU:Data.Attoparsec.ByteString.Char8
         attoparsec-0.13.1.0@attop_8CGTtPbG09CKTKQ3vR56BU:Data.Attoparsec.Text.Internal
         base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         binary-0.7.5.0@binar_03WQkzzYAE08cZoz1r0IhX:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_96M8oqQTVIe6bIZr9qhhuC:Data.ByteString.Builder
         ghcjs-base-0.2.0.0@ghcjs_210XEgjDa5q074bipEhzRA:Data.JSString
         ghcjs-base-0.2.0.0@ghcjs_210XEgjDa5q074bipEhzRA:GHCJS.Internal.Types
         ghcjs-base-0.2.0.0@ghcjs_210XEgjDa5q074bipEhzRA:GHCJS.Marshal.Pure
         hashable-1.2.4.0@hasha_Bj7NmECL61JJPMp5YcPO6u:Data.Hashable.Generic
         text-1.2.2.1@text_AoFu0I23s11C5sDmOoIAPZ:Data.Text
         text-1.2.2.1@text_AoFu0I23s11C5sDmOoIAPZ:Data.Text.Lazy
         text-1.2.2.1@text_AoFu0I23s11C5sDmOoIAPZ:Data.Text.Show
         time-1.5.0.1@time_1GoZbNl2fDzKHJr3QPGAAf:Data.Time.Calendar.Gregorian
         time-1.5.0.1@time_1GoZbNl2fDzKHJr3QPGAAf:Data.Time.Format.Parse
         time-1.5.0.1@time_1GoZbNl2fDzKHJr3QPGAAf:Data.Time.LocalTime.LocalTime
         transformers-0.4.2.0@trans_EziP6JoSSK398q9vuXpnAA:Control.Monad.Trans.Error
         vector-0.11.0.0@vecto_DeaUpJs6ZtbBhz15yBYLWJ:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vecto_DeaUpJs6ZtbBhz15yBYLWJ:Data.Vector.Unboxed
family instance modules: attoparsec-0.13.1.0@attop_8CGTtPbG09CKTKQ3vR56BU:Data.Attoparsec.Internal.Types
                         base-4.8.2.0:Control.Applicative base-4.8.2.0:Data.Either
                         base-4.8.2.0:Data.Functor.Identity base-4.8.2.0:Data.Monoid
                         base-4.8.2.0:Data.Type.Equality base-4.8.2.0:Data.Void
                         base-4.8.2.0:GHC.Exts base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_3UVKjic2MoqF92jHhg7Ur8:Data.IntMap.Base
                         containers-0.5.6.2@conta_3UVKjic2MoqF92jHhg7Ur8:Data.IntSet.Base
                         containers-0.5.6.2@conta_3UVKjic2MoqF92jHhg7Ur8:Data.Map.Base
                         containers-0.5.6.2@conta_3UVKjic2MoqF92jHhg7Ur8:Data.Sequence
                         containers-0.5.6.2@conta_3UVKjic2MoqF92jHhg7Ur8:Data.Set.Base
                         dlist-0.7.1.2@dlist_H1vOXFk9eUBGkwT4KVRG25:Data.DList
                         ghcjs-base-0.2.0.0@ghcjs_210XEgjDa5q074bipEhzRA:Data.JSString
                         primitive-0.6.1.0@primi_CRhbMv8kA5dFpZOCD0QPrI:Control.Monad.Primitive
                         semigroups-0.18.2@semig_F6zNE9TVLzf9ErbxvxghEu:Data.List.NonEmpty
                         semigroups-0.18.2@semig_F6zNE9TVLzf9ErbxvxghEu:Data.Semigroup
                         tagged-0.8.4@tagge_EpMmiBjiJPdFiokZ6hOmMm:Data.Tagged
                         template-haskell-2.10.0.0:Language.Haskell.TH.Syntax
                         text-1.2.2.1@text_AoFu0I23s11C5sDmOoIAPZ:Data.Text
                         text-1.2.2.1@text_AoFu0I23s11C5sDmOoIAPZ:Data.Text.Lazy
                         unordered-containers-0.2.7.2@unord_H1f6VqdfPrVIuMiYe9bmpP:Data.HashMap.Base
                         unordered-containers-0.2.7.2@unord_H1f6VqdfPrVIuMiYe9bmpP:Data.HashSet
                         vector-0.11.0.0@vecto_DeaUpJs6ZtbBhz15yBYLWJ:Data.Vector
                         vector-0.11.0.0@vecto_DeaUpJs6ZtbBhz15yBYLWJ:Data.Vector.Primitive
                         vector-0.11.0.0@vecto_DeaUpJs6ZtbBhz15yBYLWJ:Data.Vector.Storable
                         vector-0.11.0.0@vecto_DeaUpJs6ZtbBhz15yBYLWJ:Data.Vector.Unboxed
                         vector-0.11.0.0@vecto_DeaUpJs6ZtbBhz15yBYLWJ:Data.Vector.Unboxed.Base
import  -/  miso-0.18.0.0@HRRS7cQi8bU4jYuh6NkL5Z:Miso.String 7ac2d50578f40022cfb12b9400e313e9
import  -/  base-4.8.2.0:GHC.Base bf56e93e483b6a281ad97fedb63bfd04
import  -/  base-4.8.2.0:GHC.Show ed2e62a4d3cc01e973aec92d52f5786d
import  -/  base-4.8.2.0:Prelude aeed44d4e8d251a340a1597dd2a0cbc5
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
15d5adcb78c5255b09b08790918ba0cb
  $fEqAction :: GHC.Classes.Eq Model.Action
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Model.Action Model.$fEqAction_$c== Model.$fEqAction_$c/= -}
4ddf969523305c5290932984ce8aa35a
  $fEqAction1 :: GHC.Classes.Eq [GHC.Types.Char]
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.$fEq[]_$s$fEq[]1 -}
15d5adcb78c5255b09b08790918ba0cb
  $fEqAction_$c/= :: Model.Action -> Model.Action -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a :: Model.Action b :: Model.Action ->
                 case Model.$fEqAction_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
15d5adcb78c5255b09b08790918ba0cb
  $fEqAction_$c== :: Model.Action -> Model.Action -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: Model.Action ds1 :: Model.Action ->
                 case ds of wild {
                   DEFAULT
                   -> case ds1 of x1 { DEFAULT ->
                      GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==#
                           (GHC.Prim.dataToTag# @ Model.Action wild)
                           (GHC.Prim.dataToTag# @ Model.Action x1)) }
                   Model.UpdateTeamField a1
                   -> case ds1 of wild1 {
                        DEFAULT
                        -> case GHC.Prim.dataToTag# @ Model.Action wild1 of wild2 {
                             DEFAULT -> GHC.Types.False 13 -> GHC.Types.True }
                        Model.UpdateTeamField b1 -> Data.JSString.js_eq a1 b1 }
                   Model.UpdateSynField a1
                   -> case ds1 of wild1 {
                        DEFAULT
                        -> case GHC.Prim.dataToTag# @ Model.Action wild1 of wild2 {
                             DEFAULT -> GHC.Types.False 14 -> GHC.Types.True }
                        Model.UpdateSynField b1 -> Data.JSString.js_eq a1 b1 }
                   Model.UpdateNumberField a1
                   -> case ds1 of wild1 {
                        DEFAULT
                        -> case GHC.Prim.dataToTag# @ Model.Action wild1 of wild2 {
                             DEFAULT -> GHC.Types.False 15 -> GHC.Types.True }
                        Model.UpdateNumberField b1 -> Data.JSString.js_eq a1 b1 }
                   Model.ShuffleTeams a1
                   -> case ds1 of wild1 {
                        DEFAULT
                        -> case GHC.Prim.dataToTag# @ Model.Action wild1 of wild2 {
                             DEFAULT -> GHC.Types.False 21 -> GHC.Types.True }
                        Model.ShuffleTeams b1
                        -> GHC.Classes.$fEq[]_$c==
                             @ (GHC.Base.String, GHC.Types.Int)
                             Model.$fEqAction_$s$fEq(,)
                             a1
                             b1 }
                   Model.ShuffleSyns a1
                   -> case ds1 of wild1 {
                        DEFAULT
                        -> case GHC.Prim.dataToTag# @ Model.Action wild1 of wild2 {
                             DEFAULT -> GHC.Types.False 22 -> GHC.Types.True }
                        Model.ShuffleSyns b1 -> GHC.Classes.$fEq[]_$s$c==2 a1 b1 } }) -}
bbe1459a77db30032d99d0f63a58bfe3
  $fEqAction_$s$fEq(,) ::
    GHC.Classes.Eq ([GHC.Types.Char], GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ ([GHC.Types.Char], GHC.Types.Int)
                  (GHC.Classes.$fEq(,)_$c==
                     @ [GHC.Types.Char]
                     @ GHC.Types.Int
                     Model.$fEqAction1
                     GHC.Classes.$fEqInt)
                  (GHC.Classes.$fEq(,)_$c/=
                     @ [GHC.Types.Char]
                     @ GHC.Types.Int
                     Model.$fEqAction1
                     GHC.Classes.$fEqInt) -}
95fc89fe89340df75a2860829fc3779c
  $fEqModel :: GHC.Classes.Eq Model.Model
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Model.Model Model.$fEqModel_$c== Model.$fEqModel_$c/= -}
95fc89fe89340df75a2860829fc3779c
  $fEqModel_$c/= :: Model.Model -> Model.Model -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLLLLLLLLL),1*U(1*U,1*U(U),1*U(U),1*U,1*U,1*U,1*U,1*U,1*U,1*U(U),1*U(U),1*U(U))><S(SLLLLLLLLLLL),1*U(1*U,1*U(U),1*U(U),1*U,1*U,1*U,1*U,1*U,1*U,1*U(U),1*U(U),1*U(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ a :: Model.Model b :: Model.Model ->
                 case Model.$fEqModel_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
95fc89fe89340df75a2860829fc3779c
  $fEqModel_$c== :: Model.Model -> Model.Model -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLLLLLLLLL),1*U(1*U,1*U(U),1*U(U),1*U,1*U,1*U,1*U,1*U,1*U,1*U(U),1*U(U),1*U(U))><S(SLLLLLLLLLLL),1*U(1*U,1*U(U),1*U(U),1*U,1*U,1*U,1*U,1*U,1*U,1*U(U),1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Model.Model w1 :: Model.Model ->
                 case w of ww { Model.Model ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ->
                 case w1 of ww13 { Model.Model ww14 ww15 ww16 ww17 ww18 ww19 ww20 ww21 ww22 ww23 ww24 ww25 ->
                 Model.$w$c==
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww14
                   ww15
                   ww16
                   ww17
                   ww18
                   ww19
                   ww20
                   ww21
                   ww22
                   ww23
                   ww24
                   ww25 } }) -}
015c0ea1a31b67a28b8dcfeb86d6d392
  $fEqStates :: GHC.Classes.Eq Model.States
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Model.States Model.$fEqStates_$c== Model.$fEqStates_$c/= -}
015c0ea1a31b67a28b8dcfeb86d6d392
  $fEqStates_$c/= :: Model.States -> Model.States -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a :: Model.States b :: Model.States ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==#
                           (GHC.Prim.dataToTag# @ Model.States x1)
                           (GHC.Prim.dataToTag# @ Model.States x2)) of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
015c0ea1a31b67a28b8dcfeb86d6d392
  $fEqStates_$c== :: Model.States -> Model.States -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a :: Model.States b :: Model.States ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.==#
                      (GHC.Prim.dataToTag# @ Model.States x1)
                      (GHC.Prim.dataToTag# @ Model.States x2)) } }) -}
15d5adcb78c5255b09b08790918ba0cb
  $fShowAction :: GHC.Show.Show Model.Action
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Model.Action
                  Model.$fShowAction_$cshowsPrec
                  Model.$fShowAction_$cshow
                  Model.$fShowAction_$cshowList -}
15d5adcb78c5255b09b08790918ba0cb
  $fShowAction1 :: Model.Action -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Model.$fShowAction_$cshowsPrec Model.$fShowAction2) -}
334e8c4e968af868dfa40f9304d1c6ee
  $fShowAction2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
15d5adcb78c5255b09b08790918ba0cb
  $fShowAction_$cshow :: Model.Action -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Model.Action ->
                 Model.$fShowAction_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
15d5adcb78c5255b09b08790918ba0cb
  $fShowAction_$cshowList :: [Model.Action] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Model.Action
                   Model.$fShowAction1) -}
15d5adcb78c5255b09b08790918ba0cb
  $fShowAction_$cshowsPrec ::
    GHC.Types.Int -> Model.Action -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U> -}
95fc89fe89340df75a2860829fc3779c
  $fShowModel :: GHC.Show.Show Model.Model
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Model.Model
                  Model.$fShowModel_$cshowsPrec
                  Model.$fShowModel_$cshow
                  Model.$fShowModel_$cshowList -}
95fc89fe89340df75a2860829fc3779c
  $fShowModel1 :: Model.Model -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: Model.Model w1 :: GHC.Base.String ->
                 case w of ww { Model.Model ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ->
                 Model.$w$cshowsPrec
                   0
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   w1 }) -}
95fc89fe89340df75a2860829fc3779c
  $fShowModel_$cshow :: Model.Model -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(1*U,U(U),U(U),1*U,1*U,1*U,1*U,1*U,1*U,1*U(U),1*U(U),1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Model.Model ->
                 Model.$fShowModel_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
95fc89fe89340df75a2860829fc3779c
  $fShowModel_$cshowList :: [Model.Model] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Model.Model
                   Model.$fShowModel1) -}
95fc89fe89340df75a2860829fc3779c
  $fShowModel_$cshowsPrec ::
    GHC.Types.Int -> Model.Model -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <S,1*U(U)><S,1*U(1*U,U(U),U(U),1*U,1*U,1*U,1*U,1*U,1*U,1*U(U),1*U(U),1*U(U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int w1 :: Model.Model w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Model.Model ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ->
                 Model.$w$cshowsPrec
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   w2 } }) -}
015c0ea1a31b67a28b8dcfeb86d6d392
  $fShowStates :: GHC.Show.Show Model.States
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Model.States
                  Model.$fShowStates_$cshowsPrec
                  Model.$fShowStates_$cshow
                  Model.$fShowStates_$cshowList -}
a07a51f0e069e1b3da427305f05f8223
  $fShowStates1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "GameOver"#) -}
5e3105b84d928606b75f13affdcce840
  $fShowStates10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AliasRules"#) -}
e011089da5839b559e21d9cfe2ddfe62
  $fShowStates11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "BasicRules"#) -}
6742902985cdf0bf8be1367d4fb2801b
  $fShowStates12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "MainMenu"#) -}
9c4f9381301506296a4a47d2a521fc95
  $fShowStates2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TimeOut"#) -}
8fae17ac51e8553fc7ad03dc921ddb39
  $fShowStates3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Gameplay"#) -}
c15364f000e5630808dbea4971f7181d
  $fShowStates4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "RoundPrep"#) -}
edae513b6c1eab3c3c0e16e04b6611c3
  $fShowStates5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SynInput"#) -}
f9f1e084e4af9b2f76218f7df17b38b7
  $fShowStates6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TeamInput"#) -}
443b1a46b68f99c436c260520133aa7a
  $fShowStates7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Settings"#) -}
7e329531e4f3735f066ae8ced9578dea
  $fShowStates8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OneWordRules"#) -}
ab8832c8719be04d6534408996bd0202
  $fShowStates9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "CharadesRules"#) -}
015c0ea1a31b67a28b8dcfeb86d6d392
  $fShowStates_$cshow :: Model.States -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Model.States ->
                 Model.$fShowStates_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
015c0ea1a31b67a28b8dcfeb86d6d392
  $fShowStates_$cshowList :: [Model.States] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Model.States
                   Model.$w$cshowsPrec1) -}
015c0ea1a31b67a28b8dcfeb86d6d392
  $fShowStates_$cshowsPrec ::
    GHC.Types.Int -> Model.States -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int w1 :: Model.States w2 :: GHC.Base.String ->
                 Model.$w$cshowsPrec1 w1 w2) -}
1296b7049f75176e597a4a80cebf33b2
  $w$c== ::
    Model.States
    -> Miso.String.MisoString
    -> Miso.String.MisoString
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> [GHC.Base.String]
    -> [GHC.Base.String]
    -> [(GHC.Base.String, GHC.Types.Int)]
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> Model.States
    -> Miso.String.MisoString
    -> Miso.String.MisoString
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> [GHC.Base.String]
    -> [GHC.Base.String]
    -> [(GHC.Base.String, GHC.Types.Int)]
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Bool
  {- Arity: 24, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U)><L,1*U(U)><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U(U)><L,1*U(U)><L,1*U(U)><S,1*U><L,1*U(U)><L,1*U(U)><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U(U)><L,1*U(U)><L,1*U(U)>,
     Inline: [0] -}
fa4632c1e48ec564a938b4a478e12ce8
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Model.States
    -> Miso.String.MisoString
    -> Miso.String.MisoString
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> [GHC.Base.String]
    -> [GHC.Base.String]
    -> [(GHC.Base.String, GHC.Types.Int)]
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 14,
     Strictness: <L,U><L,1*U><L,U(U)><L,U(U)><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,U>,
     Inline: [0] -}
015c0ea1a31b67a28b8dcfeb86d6d392
  $w$cshowsPrec1 ::
    Model.States -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: Model.States w1 :: GHC.Base.String ->
                 case w of wild {
                   Model.MainMenu
                   -> GHC.Base.++ @ GHC.Types.Char Model.$fShowStates12 w1
                   Model.BasicRules
                   -> GHC.Base.++ @ GHC.Types.Char Model.$fShowStates11 w1
                   Model.AliasRules
                   -> GHC.Base.++ @ GHC.Types.Char Model.$fShowStates10 w1
                   Model.CharadesRules
                   -> GHC.Base.++ @ GHC.Types.Char Model.$fShowStates9 w1
                   Model.OneWordRules
                   -> GHC.Base.++ @ GHC.Types.Char Model.$fShowStates8 w1
                   Model.Settings
                   -> GHC.Base.++ @ GHC.Types.Char Model.$fShowStates7 w1
                   Model.TeamInput
                   -> GHC.Base.++ @ GHC.Types.Char Model.$fShowStates6 w1
                   Model.SynInput
                   -> GHC.Base.++ @ GHC.Types.Char Model.$fShowStates5 w1
                   Model.RoundPrep
                   -> GHC.Base.++ @ GHC.Types.Char Model.$fShowStates4 w1
                   Model.Gameplay
                   -> GHC.Base.++ @ GHC.Types.Char Model.$fShowStates3 w1
                   Model.TimeOut
                   -> GHC.Base.++ @ GHC.Types.Char Model.$fShowStates2 w1
                   Model.GameOver
                   -> GHC.Base.++ @ GHC.Types.Char Model.$fShowStates1 w1 }) -}
15d5adcb78c5255b09b08790918ba0cb
  data Action
    = ToRules
    | ToBasicRules
    | ToAliasRules
    | ToCharadesRules
    | ToOneWordRules
    | ToSettings
    | ToTeamInput
    | ToSynInput
    | ToRoundPrep
    | ToGameplay
    | ToGameOver
    | ToMainMenu
    | BackToMainMenu
    | UpdateTeamField Miso.String.MisoString
    | UpdateSynField Miso.String.MisoString
    | UpdateNumberField Miso.String.MisoString
    | NextWord
    | SkipWord
    | AddTeam
    | AddSyn
    | GenerateSyntagmas
    | ShuffleTeams [(GHC.Base.String, GHC.Types.Int)]
    | ShuffleSyns [GHC.Base.String]
    | StartCounter
    | Tick
    | NoOp
95fc89fe89340df75a2860829fc3779c
  data Model
    = Model {state :: Model.States,
             inputField :: Miso.String.MisoString,
             numberField :: Miso.String.MisoString,
             invalidTeamName :: GHC.Types.Bool,
             invalidSyntagma :: GHC.Types.Bool,
             buttonEnabled :: GHC.Types.Bool,
             syntagmas :: [GHC.Base.String],
             guessed :: [GHC.Base.String],
             teams :: [(GHC.Base.String, GHC.Types.Int)],
             currentTeam :: GHC.Types.Int,
             time :: GHC.Types.Int,
             runda :: GHC.Types.Int}
015c0ea1a31b67a28b8dcfeb86d6d392
  data States
    = MainMenu
    | BasicRules
    | AliasRules
    | CharadesRules
    | OneWordRules
    | Settings
    | TeamInput
    | SynInput
    | RoundPrep
    | Gameplay
    | TimeOut
    | GameOver
    Promotable
5d5c0d84d938726126f1d05e98035902
  buttonEnabled :: Model.Model -> GHC.Types.Bool
  RecSel Model.Model
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLSLLLLLL),1*U(A,A,A,A,A,1*U,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Model.Model ->
                 case ds of wild { Model.Model ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ->
                 ds6 }) -}
0a331b84d5bb810fdb2b2e29a2986dfa
  currentTeam :: Model.Model -> GHC.Types.Int
  RecSel Model.Model
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLSLL),1*U(A,A,A,A,A,A,A,A,A,1*U(U),A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Model.Model ->
                 case ds of wild { Model.Model ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ->
                 ds10 }) -}
ed22c1dc25630c6889a14015b6c57ae4
  guessed :: Model.Model -> [GHC.Base.String]
  RecSel Model.Model
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLSLLLL),1*U(A,A,A,A,A,A,A,1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Model.Model ->
                 case ds of wild { Model.Model ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ->
                 ds8 }) -}
02fc13ae455c5adc368ee1c4fbb0d749
  initialModel :: Model.Model
  {- Unfolding: (Model.Model
                   Model.MainMenu
                   Data.JSString.Internal.Type.js_empty
                   Model.initialModel3
                   GHC.Types.False
                   GHC.Types.False
                   GHC.Types.False
                   (GHC.Types.[] @ GHC.Base.String)
                   (GHC.Types.[] @ GHC.Base.String)
                   (GHC.Types.[] @ (GHC.Base.String, GHC.Types.Int))
                   Model.$fShowAction2
                   Model.initialModel2
                   Model.initialModel1) -}
4622ca5133f624603b7f6185b7ad4265
  initialModel1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1) -}
8a72ab38a94ff08fb368597b93e744b4
  initialModel2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# (-1)) -}
e5c1f179ef374b5aa3c9c6025b6ee003
  initialModel3 :: Miso.String.MisoString
  {- Unfolding: (Data.JSString.unpackCString# "25"#) -}
bdae2437e01e3be837ef0e9bf008377f
  inputField :: Model.Model -> Miso.String.MisoString
  RecSel Model.Model
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLLLLLLLL),1*U(A,1*U(U),A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Model.Model ->
                 case ds of wild { Model.Model ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ->
                 ds2 }) -}
bb88df12564c09f003a6fb13e3e4b338
  invalidSyntagma :: Model.Model -> GHC.Types.Bool
  RecSel Model.Model
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSLLLLLLL),1*U(A,A,A,A,1*U,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Model.Model ->
                 case ds of wild { Model.Model ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ->
                 ds5 }) -}
51c45b6c396e36d83cfe90463465365f
  invalidTeamName :: Model.Model -> GHC.Types.Bool
  RecSel Model.Model
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLLLLLLLL),1*U(A,A,A,1*U,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Model.Model ->
                 case ds of wild { Model.Model ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ->
                 ds4 }) -}
7d384e8dc50d2c206d4855c488e3f1ad
  numberField :: Model.Model -> Miso.String.MisoString
  RecSel Model.Model
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLLLLLLLL),1*U(A,A,1*U(U),A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Model.Model ->
                 case ds of wild { Model.Model ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ->
                 ds3 }) -}
6f1d200b2b0be7cc52d9d6a2b01c672e
  runda :: Model.Model -> GHC.Types.Int
  RecSel Model.Model
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLS),1*U(A,A,A,A,A,A,A,A,A,A,A,1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Model.Model ->
                 case ds of wild { Model.Model ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ->
                 ds12 }) -}
e7e677b9f275cd06c67cb0e687b2d7b2
  state :: Model.Model -> Model.States
  RecSel Model.Model
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLLLLLLLL),1*U(1*U,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Model.Model ->
                 case ds of wild { Model.Model ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ->
                 ds1 }) -}
2286f2eb091ea007edcc77ee173945b6
  syntagmas :: Model.Model -> [GHC.Base.String]
  RecSel Model.Model
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLSLLLLL),1*U(A,A,A,A,A,A,1*U,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Model.Model ->
                 case ds of wild { Model.Model ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ->
                 ds7 }) -}
a38790c6a5b3d97c623aead21191b706
  teams :: Model.Model -> [(GHC.Base.String, GHC.Types.Int)]
  RecSel Model.Model
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLSLLL),1*U(A,A,A,A,A,A,A,A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Model.Model ->
                 case ds of wild { Model.Model ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ->
                 ds9 }) -}
4302a91ec43be4c7d040687638eeaee6
  time :: Model.Model -> GHC.Types.Int
  RecSel Model.Model
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLSL),1*U(A,A,A,A,A,A,A,A,A,A,1*U(U),A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Model.Model ->
                 case ds of wild { Model.Model ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ->
                 ds11 }) -}
instance GHC.Classes.Eq [Model.Action] = Model.$fEqAction
instance GHC.Classes.Eq [Model.Model] = Model.$fEqModel
instance GHC.Classes.Eq [Model.States] = Model.$fEqStates
instance GHC.Show.Show [Model.Action] = Model.$fShowAction
instance GHC.Show.Show [Model.Model] = Model.$fShowModel
instance GHC.Show.Show [Model.States] = Model.$fShowStates
"SPEC/Model $fEq(,) @ [Char] @ Int" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                              [GHC.Types.Char]
                                                    $dEq1 :: GHC.Classes.Eq GHC.Types.Int
  GHC.Classes.$fEq(,) @ [GHC.Types.Char] @ GHC.Types.Int $dEq $dEq1
  = Model.$fEqAction_$s$fEq(,)
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

